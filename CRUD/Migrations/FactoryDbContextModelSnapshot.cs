// <auto-generated />
using System;
using CRUD.Models.FactoryDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CRUD.Migrations
{
    [DbContext(typeof(FactoryDbContext))]
    partial class FactoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CRUD.Factory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Factories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Московский нефтеперерабатывающий завод",
                            Name = "МНПЗ"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Омский нефтеперерабатывающий завод",
                            Name = "ОНПЗ"
                        });
                });

            modelBuilder.Entity("CRUD.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleOperators")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StorageValue")
                        .HasColumnType("float");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CRUD.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("CRUD.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 198, 238, 158, 51, 207, 92, 103, 21, 161, 209, 72, 253, 115, 247, 49, 136, 132, 180, 26, 220, 185, 22, 2, 30, 43, 192, 232, 0, 165, 197, 221, 151, 245, 20, 33, 120, 246, 174, 136, 200, 253, 217, 142, 26, 251, 12, 228, 200, 210, 197, 75, 95, 55, 179, 11, 125, 161, 153, 123, 179, 59, 11, 138, 49 },
                            RoleId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("CRUD.Tank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("MaxVolume")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<float>("Volume")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("UnitId")
                        .IsUnique();

                    b.ToTable("Tanks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxVolume = 2000f,
                            Name = "Резервуар 1",
                            UnitId = 1,
                            Volume = 1500f
                        },
                        new
                        {
                            Id = 2,
                            MaxVolume = 3000f,
                            Name = "Резервуар 2",
                            UnitId = 1,
                            Volume = 2500f
                        },
                        new
                        {
                            Id = 3,
                            MaxVolume = 3000f,
                            Name = "Дополнительный резервуар 24",
                            UnitId = 2,
                            Volume = 3000f
                        },
                        new
                        {
                            Id = 4,
                            MaxVolume = 3000f,
                            Name = "Резервуар 35",
                            UnitId = 2,
                            Volume = 3000f
                        },
                        new
                        {
                            Id = 5,
                            MaxVolume = 5000f,
                            Name = "Резервуар 47",
                            UnitId = 2,
                            Volume = 4000f
                        },
                        new
                        {
                            Id = 6,
                            MaxVolume = 500f,
                            Name = "Резервуар 256",
                            UnitId = 3,
                            Volume = 500f
                        });
                });

            modelBuilder.Entity("CRUD.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FactoryId = 1,
                            Name = "ГФУ-1"
                        },
                        new
                        {
                            Id = 2,
                            FactoryId = 1,
                            Name = "ГФУ-2"
                        },
                        new
                        {
                            Id = 3,
                            FactoryId = 2,
                            Name = "АВТ-6"
                        });
                });

            modelBuilder.Entity("CRUD.Models.User", b =>
                {
                    b.HasOne("CRUD.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("CRUD.Tank", b =>
                {
                    b.HasOne("CRUD.Unit", null)
                        .WithOne("Tank")
                        .HasForeignKey("CRUD.Tank", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRUD.Unit", b =>
                {
                    b.HasOne("CRUD.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
